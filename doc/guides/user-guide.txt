Irccd 1.0 user guide
====================
:Author: Demelier David
:Email: demelier.david@gmail.com
:Date: June, 8 2013
:toc2:
:icons:
:iconsdir: icons

== Introduction
This guide will help you installing irccd on your system and running it.

=== Installing irccd

Irccd is provided as prebuild binaries for Windows, the installer is quite easy
to use. If you have and old computer, you should take the 32bits version,
otherwise, choose 64bit version.

Grab the irccd package that fits your system at
http://projects.malikania.fr/irccd/download.php

anchor:bfs[]

=== Building from sources

On Unix systems, there is probably prebuild binaries provided by your
distribution. If not you will need to build from sources, don't worry it's
not very hard.

==== Requirements

To build from sources, you need the following installed on your system:

* cmake, http://www.cmake.org
* libircclient, http://www.ulduzsoft.com/linux/libircclient/
* Lua 5.2, http://lua.org (optional)
* C++11 support

[NOTE]
On some systems, libircclient development packages may be named libircclient-dev
or something similar.

==== Running the build

When you're ready, extract the irccd-x.y-sources.tar.xz file somewhere and go
to that directory, then type the following commands:

----
markand@localhost [irccd-1.0] $ mkdir _build_
markand@localhost [irccd-1.0] $ cd _build_
markand@localhost [irccd-1.0/_build_] $ cmake ..
markand@localhost [irccd-1.0/_build_] $ make
markand@localhost [irccd-1.0/_build_] $ sudo make install
----

This is the quick way of compiling and installing. It's also possible to set
some options to customize the build.

.Disabling Lua
You can disable Lua support.

----
markand@localhost [irccd-1.0/_build_] $ cmake .. -DWITH_LUA=Off
----

When disabling Lua, the IRC bot can still be used as a message relayer, so you
can still use irccdctl to manage irccd.

[NOTE]
If Lua is not found on your system, Lua support is automatically disabled, if
you plan to use Lua, do the above command and switch Off to On.

.Disable Lua documentation
If you don't want to install Lua API documentation, use the above command.

----
markand@localhost [irccd-1.0/_build_] $ cmake .. -DWITH_LDOC=Off
----

== Configuring irccd

Now that you've successfully installed irccd, let's add a configuration file so
we can run it.

=== Paths

The irccd configuration file is usually named 'irccd.conf' and it's location
may vary on operating systems. On every operating systems, irccd will try
to open user defined config file at first, then if not found, it fallbacks to
the default configurations paths.

On Unix, the files are loaded in the following order:

. '$\{XDG_CONFIG_HOME\}/irccd/irccd.conf' +
. '$\{HOME\}/.config/irccd/irccd.conf' +
. '/usr/local/etc/irccd.conf'.

On Windows, the files are loaded in the following order:

. 'C:\Users\YourUser\irccd\irccd.conf'
. 'C:\Program Files\irccd\irccd.conf'

.Specify at the command line
[NOTE]
On every operating systems, it's possible to pass a specific configuration file
at the command line, this will only try to open that file and exit if irccd
failed to open it. Example: `irccd -c myconfig.conf`.

.Changing prefix
[CAUTION]
The default config paths are using the default prefixes, check the
<<bfs,Building from sources>> section.

=== Syntax

The 'irccd.conf' follow a very basic *.ini* syntax. Every options are stored in
sections and some of these sections may be redefined one or more times.

Each option takes one line, it's not possible to write more than one option on
the same line.

The comment character is *#* and can live at the beginning or the end of a line.

.Correct config
[source, ini]
----
# This is a comment
[general]
verbose = false

[server]
host = "localhost"		# this is a comment too
----

.Bad config
[source, ini]
----
verbose = true				# no section!

[server]
host = "localhost" port = "8520"	# not allowed!
----

=== The section `general`

This section contains global options that are used in the whole irccd
application.

The options available:

* `plugins`: (string list) a list of plugins to load, default: empty.
* `plugin-path`: (string) a path to local modules, default: empty.
* `verbose`: (bool) enable verbose message, default: false.

.Example
[source, ini]
----
[general]
plugins = "history logger"
----

=== The section `identity`

This section is completely optional, if you don't provide one, irccd will use a
default with `irccd` as nickname and username.

This section is redefinable, you can create one or more.

The options available:

* `name`: (string) Required. the identity unique id.
* `nickname`: (string) The nickname, default: irccd.
* `realname`: (string) The realname, default: IRC Client daemon.
* `username`: (string) The username name, default: irccd

.Example
[source, ini]
----
[identity]
name = "default"
nickname = "jean"

[identity]
name = "development"
nickname = "unstable"
username = "un"
----

=== The section `server`

The section `server` is used to connect to one or more server. Thus, this
section is also redefinable.

You need at least one server in your configuration file.

The options available:

* `host`: (string) Required. The server address, default: empty.
* `identity`: (string) An identity to use.
* `name`: (string) Required. A unique id, default: empty.
* `port`: (int) Required, The server port, default: empty.
* `command-char`: (string) The prefix for invoking special commands, default: !.

.Example
[source, ini]
----
[server]
name = "local"
host = "localhost"
port = 6667
----

=== The section `listener`

This section defines listeners, you may use sockets to do a basic IPC system
in irccd. This let you controlling irccd with TCP sockets.

For instance, with listeners, you may ask `irccd` to send a message, a notice or
even kicking someone from a channel. This is done with the irccdctl utility.

There are two type of listeners availables:

* Internet sockets, IPv4 and IPv6
* Unix sockets, based on files (not available on Windows)

Both of the listener has an option `type` that is set to `internet`, `unix`.

==== Using internet sockets

The options available:

* `address`: (string) Address to bind or "*" for any, default: *.
* `family`: (string list) Internet family: ipv6, ipv4. Both are accepted, default: ipv4
* `port`: (int) Required: port number.

.Example
[source, ini]
----
[listener]
type = "internet"
address = "*"
family = "ipv4 ipv6"
port = 9999
----

This will let you controlling irccd on port 9999 with both IPv4 and IPv6 families.

==== Using unix sockets

The options available:

* `path`: (string) Required. The file path to the socket.

.Example
[source, ini]
----
[listener]
type = "unix"
path = "/tmp/irccd.sock"
----

This will let you controlling irccd on path `/tmp/irccd.sock`, the file is
automatically deleted when irccd starts, but not when it stops.

[WARNING]
Consider using internet sockets with care, especially if you are running your
bot on a server with multiple users. If your bot has operator rights and you
bind on any address, almost every users can do a kick or a ban. If this is a
concern switch to a Unix socket if possible.

=== Full example

There is an example of file that can be used, be sure to define real servers as
the one defined here does not exist for real.

.Example of `irccd.conf` file
[source, ini]
----
# This line is ignored
[general]
verbose = true

# Add a listener that bind only to IPv6
[listener]
address = "*"
family = "ipv6"
port = "12000"

# A listener that bind to both IPv4 and IPv6
[listener]
address = "*"
family = "ipv4 ipv6"
port = "15000"

# Identity reused by many servers
[identity]
name = "myIdentity"
nickname = "superbot"
realname = "SuperBot v1.0"
username = "sp"

# A server
[server]
host = "irc.foo.org"
port = "6667"
identity = "myIdentity"

# An other server
[server]
host = "chat.wanadoo.fr"
port = "6667"
identity = "myIdentity"
----

== Running irccd

Now that you have a configured file, you can start irccd by typing it's name.

----
markand@localhost [~] $ irccd
----

The following options are available:

* `-c config.conf`, load a specific config file, exits if not found
* `-p pluginpath`, add a directory to find plugins
* `-P plugin`, load a plugin, can be specified more than one time
* `-v`, be verbose

=== Using plugins

Lua plugins can be used to manage IRC events, to let you overriding distributed
plugins, irccd will try to open plugin in your home directory before 

On Unix, the paths are searched in the following order:

. Specified by -p on command line
. '$\{XDG_CONFIG_HOME\}/irccd/plugins' +
. '$\{HOME\}/.config/irccd/plugins' +

On Windows, the paths are searched in the following order:

. Specified by -p on command line
. 'C:\Users\YourUser\irccd\plugins'
. 'C:\Program Files\irccd\plugins'

== The irccdctl utility

The `irccdctl` utility let you controlling a running `irccd` instance. It uses
sockets 
