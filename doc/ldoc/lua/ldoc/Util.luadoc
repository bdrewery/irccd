--- Utilitities.
-- Some utilities.
--
-- @module irccd.util

--- Colors

local color = {
	White           = 0,		--- White.
	Black           = 1,		--- Black.
	Blue            = 2,		--- Blue.
	Green           = 3,		--- Green.
	Red             = 4,		--- Red.
	Brown           = 5,		--- Brown.
	Purple          = 6,		--- Purple.
	Orange          = 7,		--- Orange.
	Yellow          = 8,		--- Yellow.
	LightGreen      = 9,		--- LightGreen.
	Cyan            = 10,		--- Cyan.
	LightCyan       = 11,		--- LightCyan.
	LightBlue       = 12,		--- LightBlue.
	Pink            = 13,		--- Pink.
	Grey            = 14,		--- Grey.
	LightGrey       = 15		--- LightGrey.
}

--- Attributes

local attribute = {
	Bold            = '\x02',	--- Bold.
	Color           = '\x03',	--- Color (start a color sequence).
	Italic          = '\x09',	--- Italic.
	StrikeThrough   = '\x13',	--- StrikeThrough.
	Reset           = '\x0f',	--- Reset (remove all formatting).
	Underline       = '\x15',	--- Underline1.
	Underline2      = '\x1f',	--- Underline2.
	Reverse         = '\x16'	--- Reverse (reverse foreground and background).
}

--- Get the file name of a full path. <span class="deprecated">(deprecated)</span>
-- Returns the file name only of a full path. For instance, returns
-- "foo.lua" when calling with "/usr/local/foo.lua"
-- @param path the file path
-- @return the file name
-- @see fs.basename
function util.basename(path)
end

--- Create a Date object.
-- This function returns a date object with a specific time from the
-- system. If no timestamp is provided, it use the current date.
-- @see Date
-- @param timestamp an optional timestamp
-- @return a Date object
function util.date(timestamp)
end

--- Get the parent path of a file. <span class="deprecated">(deprecated)</span>
-- This function may be used to get the parent path of a file. Example:
-- calling dirname on "/foo/bar/test.txt" will returns "/foo/bar".
-- @param path the full file path
-- @return the parent path
-- @see fs.dirname
function util.dirname(path)
end

--- Check if a file exists. <span class="deprecated">(deprecated)</span>
-- Tests if a directory or a file exists.
-- @param path the path to check
-- @return true if exists
-- @see fs.exists
function util.exist(path)
end

--- Format text with colors and attributes.
-- The table attrs may have the following fields:
-- <ul>
-- <li><strong>fg (int)</strong>: the foreground color</li>
-- <li><strong>bg (int)</strong>: the background color</li>
-- <li><strong>attrs (table or int)</strong>: may be a sequence or one attribute</li>
-- </ul>
-- <br />
-- <strong>Note: some attributes are not available on all IRC servers and
-- colours are based on mIRC, nothing standard.</strong>
-- @param text the text to format
-- @param attrs the parameters, see above
-- @return a string ready to be sent
-- @see Formatting.lua
function util.format(text, attrs)
end

--- Get a environment variable. <span class="deprecated">(deprecated)</span>
-- @return the variable or an empty string
-- @see system.env
function util.getEnv()
end

--- Get the home directory. <span class="deprecated">(deprecated)</span>
-- This function should be used with care, plugin should not use user home to
-- store files.
-- @return the user home directory
-- @see plugin.info
-- @see system.home
function util.getHome()
end

--- Get the time spent from start. <span class="deprecated">(deprecated)</span>
-- Get how many milliseconds spent since the irccd startup.
-- @return the number of seconds
-- @see system.ticks
function util.getTicks()
end

--- Create a directory recursively. <span class="deprecated">(deprecated)</span>
-- This function acts like <code>mkdir -p</code>.
-- @param path the path
-- @return true on success or false plus an error
-- @return the error message
-- @see fs.mkdir
function util.mkdir(path)
end

--- Open a directory. <span class="deprecated">(deprecated)</span>
-- Optional boolean skipSpecial may be passed to avoid ".", ".." for being
-- included.
-- @param path the path
-- @param skipSpecial forget "." and "..", default: false
-- @see irccd.fs.Directory
-- @see fs.opendir
-- @return a Directory object
function util.opendir(path, skipSpecial)
end

--- Split the nickname and host. <span class="deprecated">(deprecated)</span>
-- Extract the nickname and host from a user, for instance with
-- foo!~foo@localhost, foo will be returned as first value, localhost
-- as second.
-- @param user the user to split
-- @return the nickname
-- @return the hostname
function util.splitUser(user)
end

--- Split the nickname.
-- Extract the nickname from a user, for instance with
-- foo!~foo@localhost, foo will be returned.
-- @param user the user to split
-- @return the nickname
function util.splituser(user)
end

--- Split the hostname.
-- Extract the hostname from a user, for instance with
-- foo!~foo@localhost, localhost will be returned.
-- @param user the user to split
-- @return the nickname
function util.splithost(user)
end

--- Sleep for milliseconds. <span class="deprecated">(deprecated)</span>
-- Suspend the execution thread.
-- @param msec the number of milliseconds
-- @see system.usleep
-- @see system.sleep
function util.usleep(msec)
end

--- Date
-- @type Date

--- Get a calendar.
-- Return a table with the following fields:
-- <ul>
-- <li><strong>seconds (int)</strong>: seconds elapsed [0-60]</li>
-- <li><strong>minutes (int)</strong>: minutes elapsed [0-59]</li>
-- <li><strong>hours (int)</strong>: hours elapsed [0-23]</li>
-- <li><strong>month (int)</strong>: number of month [1-12]</li>
-- <li><strong>year (int)</strong>: the real year</li>
-- </ul>
-- @return a table
function Date:calendar()
end

--- Format a date with a format.
-- See the manual strftime(3) for keywords.
-- @param format the format
-- @return the date formatted
function Date:format(format)
end

--- Return the timestamp.
-- Get the timestamp from the epoch (aka time_t).
-- @return a timestamp
function Date:timestamp()
end

--- Date metamethods.
-- The metamethods available for object Date.
-- @section

--- Test equality.
-- @param other the other date
-- @return true if they equals
function Date:__eq(other)
end

--- Test inferiority
-- @param other the other date
-- @return self <= other comparison
function Date:__le(other)
end

--- Convert object to string.
-- @return a string
function Date:__tostring()
end

-- vim: set syntax=lua nu:
