--- Sockets.
-- This API provides support for low level sockets. It currently
-- suports AF\_INET, AF\_INET6 and AF\_LOCAL (on Unix only).
--
-- <h2>Addresses</h2>
--
-- Starting from irccd 1.2, a new address system has been designed. Now
-- addresses are simple raw Lua tables. However, they are updated by irccd.socket
-- API for performance.
--
-- For example, when binding a socket, you can use the following code:
--
--	s:bind {
--		address = "*",
--		port	= 8989,
--	}
--
-- After the call, the table will have a new internal field that describe the
-- resolved address. For instance, if you plan to use sendto a lot, it is
-- recommended to create a table before sending like this:
--
--	local host = {
--	     host	= "localhost",
--	     port	= 80
--	}
--	
--	s:sendto("Test", host)
--
-- After the first call to sendto, the host table will be updated and further
-- call will use the resolved address.
--
-- @module irccd.socket

--- Socket address family
local family = {
	Inet = 1,		--- AF_INET (IPv4) family.
	Inet6 = 2,		--- AF_INET6 (IPv6) family.
	Unix = 3		--- AF_LOCAL (Unix) family, only on Unix.
}

--- Socket type
local type = {
	Stream,			--- SOCK_STREAM sockets
	Datagram,		--- SOCK_DGRAM sockets
}

--- Socket protocol
local protocol = {
	Tcp,			--- IPPROTO_TCP
	Udp,			--- IPPROTO_UDP
	IPv4,			--- IPPROTO_IPV4
	IPv6,			--- IPPROTO_IPv6
}

--- Create a new socket.
-- @param family one of the irccd.socket.family
-- @param type one of the irccd.socket.type
-- @return the created socket or nil
-- @return the error message
function socket.new(family, type)
end

--- Socket
-- @type Socket

--- Accept a client.
--
-- The address table will have the following fields:
--
-- <br />
-- For internet families:
-- <ul>
-- <li><strong>ip (string)</strong>: Optional, the IP</li>
-- <li><strong>host (string)</strong>: Optional, the hostname</li>
-- <li><strong>service (string)</strong>: Optional, the service name</li>
-- <li><strong>port (number)</strong>: Optional, the port number</li>
-- </ul>
-- <br />
-- For unix families: <strong>(not supported on Windows)</strong>
-- <ul>
-- <li><strong>path (string)</strong>: The path</li>
-- </ul>
-- @return the accepted socket (or nil)
-- @return the address table
-- @return the error message if any
function Socket:accept()
end

--- Bind to an address.
-- The address table must have the following fields:
--
-- <br />
-- For internet families:
-- <ul>
-- <li><strong>address (string)</strong>: Required, the address or "*" for any</li>
-- <li><strong>port (number)</strong>: Required, the port number</li>
-- <li><strong>family (enum)</strong>: Optional, the family. Default: same as socket</li>
-- </ul>
-- <br />
-- For unix families: <strong>(not supported on Windows)</strong>
-- <ul>
-- <li><strong>path (string)</strong>: Required, the path</li>
-- </ul>
-- @param address the address
-- @return true on success
-- @return the error message
function Socket:bind(address)
end

--- Set the blocking mode.
-- @param mode the mode
-- @return true on success
-- @return the error message
function Socket:blockMode(mode)
end

--- Close the socket.
-- This function is required when you have finished using the socket,
-- the __gc metamethod will not close the socket.
function Socket:close()
end

--- Connect to an end point.
-- The address table must have the following fields:
--
-- <br />
-- For internet families:
-- <ul>
-- <li><strong>host (string)</strong>: Required, the hostname</li>
-- <li><strong>port (number)</strong>: Required, the port number</li>
-- <li><strong>family (enum)</strong>: Optional, the family. Default: same as socket</li>
-- <li><strong>type (enum)</strong>: Optional, the type. Default: same as socket</li>
-- </ul>
-- <br />
-- For unix families: <strong>(not supported on Windows)</strong>
-- <ul>
-- <li><strong>path (string)</strong>: Required, the path</li>
-- </ul>
-- @param address the address
-- @return true on success
-- @return the error message
function Socket:connect(address)
end

--- Listen to a number of pending connections.
-- @param count an optional count, default: 64.
-- @return true on success
-- @return the error message
function Socket:listen(count)
end

--- <span class="deprecated">(deprecated)</span> Receive some data.
-- Get some data as a stream mode.
-- @param howmany how much to receive
-- @return the read string or nil
-- @return the error message
-- @see irccd.socket.address
-- @see Socket:recv
function Socket:receive(howmany)
end

--- <span class="deprecated">(deprecated)</span> Receive some data.
-- Get some data from a peer, typically UDP.
-- @param howmany how much to receive
-- @return the read string or nil
-- @return the address
-- @return the error message
-- @see irccd.socket.address
-- @see Socket:recvfrom
function Socket:receiveFrom(howmany)
end

--- Send some data.
-- This function sends data to a stream based socket.
-- @param data the data
-- @return the number of bytes sent or nil
-- @return the error message
function Socket:send(data)
end

--- <span class="deprecated">(deprecated)</span> Send some data.
-- This function sends data to a datagram based socket. This function signature
-- is deprecated and new code should use sendto instead.
-- @param data the data
-- @param address where to send
-- @return the number of bytes sent or nil
-- @return the error message
-- @see irccd.socket.address
-- @see Socket:sendto
function Socket:send(data, address)
end

--- Send data to not connected socket.
-- The address table must have the following fields:
--
-- <br />
-- For internet families:
-- <ul>
-- <li><strong>host (string)</strong>: Required, the hostname</li>
-- <li><strong>port (number)</strong>: Required, the port number</li>
-- <li><strong>family (enum)</strong>: Optional, the family. Default: same as socket</li>
-- <li><strong>type (enum)</strong>: Optional, the type. Default: same as socket</li>
-- </ul>
-- <br />
-- For unix families: <strong>(not supported on Windows)</strong>
-- <ul>
-- <li><strong>path (string)</strong>: Required, the path</li>
-- </ul>
-- @param data the data
-- @param address the address
-- @return the number of bytes sent or nil
-- @return the error message
function Socket:sendto(data, address)
end

--- Get some data as a stream mode.
-- @param howmany how much to receive
-- @return the read string or nil
-- @return the error message
function Socket:recv(howmany)
end

--- Get some data from a peer, typically UDP.
-- This function will return the same address if the same client sent
-- data. That same table will only be returned if you didn't discard
-- the return value.
--
-- This is useful if you want to keep track the data by users.
--
-- </br >
-- The address table will have the following fields:
--
-- <br />
-- For internet families:
-- <ul>
-- <li><strong>ip (string)</strong>: Optional, the IP</li>
-- <li><strong>host (string)</strong>: Optional, the hostname</li>
-- <li><strong>service (string)</strong>: Optional, the service name</li>
-- <li><strong>port (number)</strong>: Optional, the port number</li>
-- </ul>
-- <br />
-- For unix families: <strong>(not supported on Windows)</strong>
-- <ul>
-- <li><strong>path (string)</strong>: The path</li>
-- </ul>
-- @param howmany how much to receive
-- @return the read string or nil
-- @return the client address
-- @return the error message
function Socket:recvfrom(howmany)
end

--- Set an option.
-- This function is a wrapper around the setsockopt function. Level and
-- name are string which may refer to the following:
-- <br /><br />
--
-- Levels available:
-- <ul>
-- <li><span class="parameter">socket</span>: the SOL_SOCKET level</li>
-- <li><span class="parameter">tcp</span>: the IPPROTO_TCP level</li>
-- <li><span class="parameter">ipv6</span>: the IPPROTO_IPV6 level</li>
-- </ul>
-- <br />
--
-- The following options belong to <span class="parameter">socket</span>
-- level:
--
-- <ul>
--
-- <li>
-- <span class="parameter">reuse-address</span>: bool, reuse the
-- address.
-- </li>
--
-- <li>
-- <span class="parameter">broadcast</span>: bool, sending broadcast
-- data
-- </li>
--
-- <li>
-- <span class="parameter">debug</span>: bool, print debug
-- information
-- </li>
--
-- <li>
-- <span class="parameter">keep-alive</span>: bool, enable sending
-- keep alive packets
-- </li>
-- </ul>
--
-- <br />
--
-- The following options belong to <span class="parameter">tcp</span>
-- level:
--
-- <ul>
--
-- <li>
-- <span class="parameter">no-delay</span>: bool, Disables the Nagle
-- algorithm for send coalescing
-- </li>
-- </ul>
--
-- <br />
--
-- The following options belong to <span class="parameter">ipv6</span>
-- level:
--
-- <ul>
-- <li>
-- <span class="parameter">v6only</span>: bool, disable or enable the
-- IPv6 mode only
-- </li>
-- </ul>
-- @param level the level
-- @param name the name
-- @param arg the argument (depend on above)
-- @return true on success or nil
-- @return the error message
-- @usage
-- s:set("socket", "reuse-address", true)
function Socket:set(level, name, arg)
end

-- vim: set syntax=lua nu:
