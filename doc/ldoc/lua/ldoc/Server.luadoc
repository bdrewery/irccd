--- Server class.
-- The server class is usually passed through every Lua callbacks, on IRC
-- events.
--
-- @module irccd.server

--- Server
-- @type Server

--- Get the identity used for this server.
-- Returns a table with the following fields:
-- <ul>
-- <li><strong>name (string)</strong>: the identity name</li>
-- <li><strong>nickname (string)</strong>: the nickname currently in use</li>
-- <li><strong>username (string)</strong>: the username</li>
-- <li><strong>realname (string)</strong>: the full name</li>
-- <li><strong>ctcpversion (string)</strong>: the CTCP Version reply</li>
-- </ul>
-- @return an identity table
function Server:getIdentity()
end

--- Get the server name id.
-- Returns the server id.
-- @return the name id
function Server:getName()
end

--- Get the server information.
-- Returns a table with the server connection information with
-- the following fields:
-- <ul>
--   <li><strong>name (string)</strong>: the server ident</li>
--   <li><strong>hostname (string)</strong>: the hostname</li>
--   <li><strong>port (int)</strong>: the port</li>
--   <li><strong>ssl (bool)</strong>: true if using SSL</li>
--   <li><strong>sslVerify (bool)</strong>: true if using SSL verification</strong>
-- </ul>
-- @return the information table
function Server:getInfo()
end

--- Send a channel notice.
-- Send a public notice on a channel.
-- @param channel the target channel
-- @param message the message
function Server:cnotice(channel, message)
end

--- Join a channel.
-- Join a specific IRC channel, the channel must starts with a
-- hash '#'.
-- @param channel the channel to join
-- @param password an optional password
function Server:join(channel, password)
end

--- Kick someone.
-- Kick someone from a channel. Note that you obviously need rights
-- on the channel.
-- @param nickname the person to kick
-- @param channel from which channel
-- @param reason an optional reason
function Server:kick(nickname, channel, reason)
end

--- Invoke a CTCP Action.
-- Send a message as known as /me. The target may be a nick
-- or a channel.
-- @param target a nick or a channel
-- @param message the message to send
function Server:me(target, message)
end

--- Change the channel mode.
-- Change the channel mode. Mode can contains additional parameters
-- if supported, such as: "+k secret".
-- @param channel the channel target
-- @param mode the mode
function Server:mode(channel, mode)
end

--- Get the list of names.
-- Get all nicknames on the channel, this is a deferred call,
-- the function <strong>func</strong> must have the following signature
--
--	function callback(list)
--
-- where <strong>list</strong> is a sequence table with all nicknames.
-- @param channel the channel to check
-- @param func the function
-- @see Deferred.lua
-- @usage server:names(
--	"#test",
--	function (list)
--		-- Play with list sequence
--	end
-- )
function Server:names(channel, func)
end

--- Change nickname.
-- Change your nickname.
-- @param nickname the new nickname
function Server:nick(nickname)
end

--- Send a private notice.
-- Send a private notice to a user.
-- @param nickname the target nickname
-- @param message the notice message
function Server:notice(nickname, message)
end

--- Leave a channel.
-- Leave a specific channel. At the moment, is it not possible
-- to leave a channel with a quit message.
-- @param channel the channel to leave
function Server:part(channel)
end

--- Send a private message.
-- Send a private message to the specified target.
-- @param nickname the target
-- @param message the message
function Server:query(nickname, message)
end

--- Send a message.
-- Send a message to a channel or a nickname.
-- @param target a nick or a channel
-- @param message the message to send
function Server:say(target, message)
end

--- Change the channel topic.
-- Change the topic on the specified channel, you obviously
-- need rights to do that.
-- @param channel the channel
-- @param topic the new topic
function Server:topic(channel, topic)
end

--- Change your user mode.
-- Change your own user mode.
-- @param mode the new mode
function Server:umode(mode)
end

--- Get whois information.
-- Get information from a user. This is a deferred call.
-- the function <strong>func</strong> must have the following signature
--
--	function callback(info)
--
-- where <strong>info</strong> is a table with the following fields:
-- <ul>
--   <li><strong>nickname (string)</strong>: the nickname</li>
--   <li><strong>user (string)</strong>: the username</li>
--   <li><strong>host (string)</strong>: user's hostname</li>
--   <li><strong>realname (string)</strong>: the realname</li>
--   <li><strong>channels (table)</strong>: a sequence table of all channels</li>
-- </ul>
-- @param target the nickname target
-- @param func the function
-- @usage server:whois(
--	"test",
--	function (info)
--		-- Play with info
--	end
-- )
-- @see Deferred.lua
function Server:whois(target, func)
end

--- Server metamethods.
-- The metamethods available for object Server.
-- @section

--- Test equality.
-- @param other the other date
-- @return true if they equals
function Server:__eq(other)
end

--- Convert object to string.
-- @return a string
function Server:__tostring()
end

-- vim: set syntax=lua:
