--- Filesystem support.
-- Open, read and analyze directories.
--
-- @module irccd.fs

--- Get the file name of a full path.
-- Returns the file name only of a full path. For instance, returns
-- "foo.lua" when calling with "/usr/local/foo.lua"
-- @param path the file path
-- @return the file name
function fs.basename(path)
end

--- Get the parent path of a file.
-- This function may be used to get the parent path of a file. Example:
-- calling dirname on "/foo/bar/test.txt" will returns "/foo/bar".
-- @param path the full file path
-- @return the parent path
function fs.dirname(path)
end

--- Check if a file exists.
-- Tests if a directory or a file exists.
-- @param path the path to check
-- @return true if exists
function fs.exists(path)
end

--- Create a directory recursively.
-- This function acts like <code>mkdir -p</code>.
-- @param path the path
-- @param mode an optional octal mode
-- @return true on success or false plus an error
-- @return the error message
function fs.mkdir(path, mode)
end

--- Open a directory.
-- Optional boolean skipSpecial may be passed to avoid ".", ".." for being
-- included.
-- @param path the path
-- @param skipSpecial forget "." and "..", default: false
-- @see Directory
-- @return a Directory object
function fs.opendir(path, skipSpecial)
end

--- Get file status.
-- Returns a table with the following information:
-- <ul>
-- <li><span class="parameter">device</span>: the device number</li>
-- <li><span class="parameter">inode</span>: the inode number</li>
-- <li><span class="parameter">nlink</span>: the number of hard links to the file</li>
-- <li><span class="parameter">atime</span>: the last time the file was accessed</li>
-- <li><span class="parameter">mtime</span>: time when file data last modified</li>
-- <li><span class="parameter">ctime</span>: time when file status was last changed</li>
-- <li><span class="parameter">size</span>: the file size in bytes</li>
-- <li><span class="parameter">blocksize</span>: the optional I/O block size</li>
-- <li><span class="parameter">blocks</span>: the number of blocks for the file</li>
-- </ul>
-- <br />
--
-- <strong>Note: not all fields are available.</strong><br />
-- <strong>Note: you must load the irccd.util library for fields atime, ctime and mtime.</strong>
--
-- @usage
-- local fs = require "irccd.fs"
-- local util = require "irccd.util"
--
-- local status = fs.stat("/path/to/file")
--
-- if status.mtime then
--         print(string.format("Last modified on: %s", status.mtime:format("%d %a %y %H:%M:%S")))
-- end
-- @param path the path to the file
-- @return the table or nil
-- @return the error message
-- @see irccd.util
function fs.stat(path)
end

--- Directory
-- @type Directory

--- Count the number of entries in the directory.
-- Note that if you didn't passed true to fs.opendir() you will have
-- "." and ".." included.
-- @return the number of entries in the directory
-- @see fs.opendir
function Directory:count()
end

--- Iterate over the entries.
-- This function returns 2 arguments
-- the entry and a boolean telling if is a directory.
-- @return the entry name
-- @return true if it is a directory
-- @usage
-- local d = fs.opendir("/")
--
-- -- Read the directory "/"
-- for e, isdir in d:read() do
--         if isdir then
--                 print(e .. " is a directory")
--         else
--                 print("=>" .. e)
--         end
-- end
function Directory:read()
end

--- Directory metamethods.
-- The metamethods available for object Directory.
-- @section

--- Test equality.
-- @param other the other directory
-- @return true if they equals
function Directory:__eq(other)
end

--- Convert object to string.
-- @return a string
function Directory:__tostring()
end

-- vim: set syntax=lua nu:
