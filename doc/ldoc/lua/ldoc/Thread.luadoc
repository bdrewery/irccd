--- Threads.
-- <br />
-- <strong>Note: Threads are very experimental and not widely tested yet.</strong>
-- <br /><br />
--
-- This API provides functions to create individual threads within
-- plugins.
--
-- @module irccd.thread

--- Create a new thread.
-- Use the function as the thread function. You can pass any parameter
-- you like to the thread just after the function itself.
--
-- <br />
-- <strong>Note: userdata and functions are not supported as parameters.</strong>
-- <br />
-- <br />
--
-- You may discard the return value, the thread will automatically be deleted
-- when its execution has finished
--
-- @param func the thread function
-- @param ... the arguments to pass to the thread function
-- @return a Thread object
function thread.new(func, ...)
end

--- Thread
-- @type Thread

--- Wait the thread to finish.
-- This function blocks until the thread finishes its execution. Be
-- careful using this function as it may block other plugins.
-- @return true on success or nil
-- @return an error message
function Thread:join()
end

--- Permit the detached execution of a thread.
-- You usually do not need to call this function, the __gc function
-- automatically do it.
--
-- <br />
-- <strong>Note: it's not a good practice to detach threads.</strong>
-- @return true on success or nil
-- @return an error message
function Thread:detach()

--- Thread metamethods.
-- The metamethods available for object Thread.
-- @section

--- Thread destructor.
-- Destructor for a thread, if the thread has not been joined or detached,
-- it is detached by this function.
function Thread:__gc()
end

--- Convert thread to string.
-- @return the string
function Thread:__tostring()
end

-- vim: set syntax=lua nu:
